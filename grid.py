# grid functions go here!

import pygame as pg
import numpy as np
import random
import imageio as io

''' returns a uniform spanning tree maze of the described cell size (min 2, max 99) generated by the Aldous-Broder algorithm '''
def aldousBroder(size):
    moveOptions = ['l', 'r', 'u', 'd']
    rRestrict = lRestrict = uRestrict = dRestrict = False 
    cellsVisited = 0

    # initializes a blank grid
    grid = np.zeros((size*2 + 1, size*2 + 1), dtype=int)

    # picks a random cell
    row = random.randrange(1, len(grid), 2); col = random.randrange(1, len(grid), 2)

    # restricts movement options based on current position
    if col == 1:
        lRestrict = True
        moveOptions.remove('l')
    elif (col + 2) == len(grid):
        rRestrict = True
        moveOptions.remove('r')
    if row == 1:
        uRestrict = True
        moveOptions.remove('u')
    elif (row + 2) == len(grid):
        dRestrict = True
        moveOptions.remove('d')

    # main algorithm loop runs until all cells have been visited
    while (cellsVisited != size*size):

        # randomly chooses movement direction from available options
        currentMove = random.choice(moveOptions)

        # for chosen movement direction, carves path to, marks, and counts this cell if it was previously unvisited,
        # then expands or restricts movement options as necessary
        if currentMove == 'l':          # left movement routine
            col -= 2 
            if grid[row, col] != 2:
                grid[row, col] = 2
                grid[row, col + 1] = 1
                cellsVisited += 1

            if rRestrict:
                rRestrict = False
                moveOptions.append('r')
            if col == 1:
                lRestrict = True
                moveOptions.remove('l')
        elif currentMove == 'r':        # right movement routine
            col += 2
            if grid[row, col] != 2:
                grid[row, col] = 2
                grid[row, col - 1] = 1
                cellsVisited += 1
                
            if lRestrict:
                lRestrict = False
                moveOptions.append('l')
            if (col + 2) == len(grid):
                rRestrict = True
                moveOptions.remove('r')
        elif currentMove == 'u':        # up movement routine
            row -= 2
            if grid[row, col] != 2:
                grid[row, col] = 2
                grid[row + 1, col] = 1
                cellsVisited += 1

            if dRestrict:
                dRestrict = False
                moveOptions.append('d')
            if row == 1:
                uRestrict = True
                moveOptions.remove('u')
        elif currentMove == 'd':        # down movement routine
            row += 2
            if grid[row, col] != 2:
                grid[row, col] = 2
                grid[row - 1, col] = 1
                cellsVisited += 1

            if uRestrict:
                uRestrict = False
                moveOptions.append('u')
            if (row + 2) == len(grid):
                dRestrict = True
                moveOptions.remove('d')

    # creates entrance and exit by removing a wall at the edge of either the rows or the columns
    # create entry (marked with -1)
    if random.randint(0, 1):
        row = random.choice([0, size*2])
        col = random.randrange(1, len(grid), 2)
        grid[row, col] = -1
    else:
        col = random.choice([0, size*2])
        row = random.randrange(1, len(grid), 2)
        grid[row, col] = -1
    # create exit (marked with -2)
    # (wrapped in a loop with a conditional to ensure entrance and exit will not overlap)
    while 1:
        if random.randint(0, 1):
            row = random.choice([0, size*2])
            col = random.randrange(1, len(grid), 2)
            if (grid[row, col] == -1):
                continue
            grid[row, col] = -2
        else:
            col = random.choice([0, size*2])
            row = random.randrange(1, len(grid), 2)
            if (grid[row, col] == -1):
                continue
            grid[row, col] = -2
        break

    return grid